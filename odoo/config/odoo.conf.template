[options]

#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Service Settings
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

#-----------------------------------------------------------------------------
# Specify the addons_path folders ordered by priority  
# addons_path=/first/path/,/second/path/
#-----------------------------------------------------------------------------
addons_path = /usr/lib/python3/dist-packages/odoo/addons


#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Logs Settings
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#
#
# I found information from Odoo on logging was not very clear. So I complied
# this helpful list and info about Odoo logging.
#
# Information was gleaned from the following sites:
#   (The URLs are broken up to fit them in the file)
# - http://www.mindissoftware.com
#   /2014/09/07/Odoo-logging-configuration-usage-implementation/
# - https://www.odoo.com/
#   /forum/help-1/question
#   /what-is-the-full-list-of-command-line-options-for-odoo-59139
# - https://www.odoo.com/documentation/8.0/reference/cmdline.html
#
# Odoo uses the Python standard logging library. However, it uses a special 
# configuration syntax to configure logging levels for its modules. 
#
# It's helpful to know what each level type means, so below is quick list:
#
# Level meanings:
#    debug: Debug message for debugging only.
#     info: Information message to report important modular event.
#  warning: Warning message to report minor issues.
#    error: Error message to report failed operations.
# critical: A critical message -- so critical that the module cannot work
#
#
# log_level: 
#  any value in the list below. Odoo changed the log_level meaning 
#  here because these level values are mapped to a set of predefined
# 'module:log_level' pairs. These pairs are listed next to the log-level. 
# You could get the same result by using the log_handler option
#
#
# LOG LEVEL           / log_handler: module:log_level
# ----------------------------------------------------------------------------
# info                / [':INFO']
# critical            / ['openerp:CRITICAL', 'werkzeug:CRITICAL']
# error               / ['openerp:ERROR', 'werkzeug:ERROR']
# warn                / ['openerp:WARNING', 'werkzeug:WARNING']
# debug               / ['openerp:DEBUG']
# debug_sql           / ['openerp.sql_db:DEBUG']
# debug_rpc           / ['openerp:DEBUG','openerp.http.rpc.request:DEBUG']
# debug_rpc_answer    / ['openerp:DEBUG','openerp.http.rpc.request:DEBUG', 
#                       'openerp.http.rpc.response:DEBUG']
#
# End of Logging Info
# ----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# The log filename. If not set, use stdout.
#-----------------------------------------------------------------------------
;logfile = /var/log/odoo/odoo-server.log

#-----------------------------------------------------------------------------
# True/False. If True, create a daily log file and keep 30 files.
#-----------------------------------------------------------------------------
;logrotate = True

#-----------------------------------------------------------------------------
# Ture/False. If True, also write log to 'ir_logging' table in database
#-----------------------------------------------------------------------------
log-db = False

#-----------------------------------------------------------------------------
# True/False logs to the system's event logger: syslog
#-----------------------------------------------------------------------------
syslog = False

#-----------------------------------------------------------------------------
# Log level - One of the following:
# info, debug_rpc, warn, test, critical, debug_sql, error, debug, 
# debug_rpc_answer
#-----------------------------------------------------------------------------
log-level = info

#-----------------------------------------------------------------------------
# log_handler - can be a list of 'module:log_level' pairs. 
# The default value is ':INFO' -- it means the default logging level 
# is 'INFO' for all modules.
#-----------------------------------------------------------------------------
# log_handler = 


#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Tuning Options
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#-----------------------------------------------------------------------------
# A word on tuning your Odoo Server
#-----------------------------------------------------------------------------
# 
# A lot of time has gone in to testing this TKL appliance, and one thing we
# learned while testing was tuning. For all the why we chose these numbers you
# can take a look at he issues on GitHub (links at the botton of this article)
# 
# Most of this text here was taken from the Memory Matrix Discussion 
# https://github.com/DocCyblade/tkl-odoo/issues/49#issuecomment-148881166
# 
# It is important to note that you can run Odoo in threaded mode by setting 
# the workers option to 0 however there are some modules that won't work 
# and you loose fine grain control of resource management. 
# 
#-----------------------------------------------------------------------------
# 
# the --workers is how many new process will be started to perform work or 
# (answer requests) The workers have limits upon them set by the limit_xxxxx
# options here in the config file. 
# 
# The "limit_memory_soft" limit is the amount of ram that when a process
# goes over this limit after it is done with the request it is terminated
# and the memory it was using is freed. This amount goes for each process
# 
# The hard limit is the amount of ram that if the process goes over it, 
# it WILL terminate right then. (I don't think this is really correct 
# because of the PDF issue we had and set this to 1.3 GB and never 
# saw a process take this much. but if its below 1.3GB PDF are not created)
# 
# The one we need to pay attention to is the limit_memory_soft. 
# As these workers will stay alive and hold on to memory until that limit 
# is reached. So if you have 5 workers and the soft limit is 256MB you could
# end up with 5 workers each taking 256MB that's 1.25GB of RAM that could
# be taken up. If you only had 1GB of ram you may need to dial back your
# workers or your soft limit.
# 
# It's a balancing act of sorts, I am also not sure if keeping the 
# workers at say 350 or 400 if there is some caching effect. Not sure
# why it's holding on to the memory.
# 
#-----------------------------------------------------------------------------
# 
# Hardware Matrix for recommended values:
#   (Note these are for REAL hardware, Virtual Hardware has it's own
#     issues that can arise with too many guest on a host with too many 
#     CPU cores etc, so remember that when looking at the chart below)
#   (One other note that when I tested these, I did use VMware but 
#     no other VMs where competing for resources)
#   (One last note, really. These numbers are to show the relationship 
#     between the config settings and hardware. We also assume you are running
#     the database server on the same server. I know at some point in the
#     higher numbers that this would not be the case. These are not numbers 
#     set in stone nor numbers gotten from Odoo. These are numbers I have 
#     come up with from the testing I have done. Real world examples if you 
#     have them would be great and these numbers can and should be updated!
#    
# Heading            | Description 
# ------------------ | ---------------------------------------------------------
# CPUs               | Number of CPU Cores not threads
# Physical           | Physical memory, not virtual or swap
# workers            | Number of workers specified in config file (workers = x)
# cron               | Number of workers for cron jobs (max_cron_threads = xx)
# Mem Per            | Memory in MB that is the max memory for request per worker
# Max Mem            | Maximum amount that can be used by all workers 
# limit_memory_soft  | Number in bytes that you will use for this setting
# 
# Note: Max Memory if notice is less than total memory this is on purpose. As 
#       workers process requests they can grow beyond the Mem Per limit so a 
#       server under heavy load could go past this amount. This is why there 
#       is "head room" built in.
# 
# CPUs | Physical | workers | cron | Mem Per | Max Mem | limit_memory_soft  
# ---- | -------- | ------- | ---- | ------- | ------- | -----------------------
# ANY  | =< 256MB |    NR   |  NR  |      NR |     NR  | NR
#  1   |   512MB  |    0    |  N/A |     N/A |     N/A | N/A
#  1   |   512MB  |    1    |  1   |   177MB |   354MB | 185127901
#  1   |    1GB   |    2    |  1   |   244MB |   732MB | 255652815
#  1   |    2GB   |    2    |  1   |   506MB |  1518MB | 530242876
#  2   |    1GB   |    3    |  1   |   183MB |   732MB | 191739611
#  2   |    2GB   |    5    |  2   |   217MB |  1519MB | 227246947
#  2   |    4GB   |    5    |  2   |   450MB |  3150MB | 471974428
#  4   |    2GB   |    5    |  2   |   217MB |  1519MB | 227246947
#  4   |    4GB   |    9    |  2   |   286MB |  3146MB | 300347363
#  4   |    8GB   |    9    |  3   |   546MB |  6552MB | 572662306  
#  4   |    16GB  |    9    |  3   |  1187MB | 14244MB | 1244918057
# 
# 
#-----------------------------------------------------------------------------
# 
# Calculations on how we got the above chart and other info can be found
# 
# Memory Matrix Discussion
#   https://github.com/DocCyblade/tkl-odoo/issues/49
# 
# Shakedown Testing Discussions
#   https://github.com/DocCyblade/tkl-odoo/issues/52
#   https://github.com/DocCyblade/tkl-odoo/issues/53
#   https://github.com/DocCyblade/tkl-odoo/issues/54
#   https://github.com/DocCyblade/tkl-odoo/issues/55
# 
#-----------------------------------------------------------------------------

#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Database Settings are configured by Odoo's docker image and environment vars
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Email Settings
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

#-----------------------------------------------------------------------------
# Specify the SMTP server for sending email (default localhost).
#-----------------------------------------------------------------------------
;smtp_server = smtp

#-----------------------------------------------------------------------------
# Specify the SMTP user for sending email (default False).
#-----------------------------------------------------------------------------
;smtp_user = False

#-----------------------------------------------------------------------------
# Specify the SMTP password for sending email (default False).
#-----------------------------------------------------------------------------
;smtp_password = False

#-----------------------------------------------------------------------------
# if True, SMTP connections will be encrypted with SSL (STARTTLS)
#-----------------------------------------------------------------------------
;smtp_ssl = False

#-----------------------------------------------------------------------------
# Specify the SMTP email address for sending email
#-----------------------------------------------------------------------------
;email_from = "TKL-Odoo-Server@example.com"

#-----------------------------------------------------------------------------
# Specify the SMTP port
#-----------------------------------------------------------------------------
;smtp_port = 25


#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
# Based on sample by @Guidoom 
# https://gist.github.com/Guidoom/d5db0a76ce669b139271a528a8a2a27f
#HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH